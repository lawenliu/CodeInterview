{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Calibri;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh13920\viewkind0
\deftab720
\pard\pardeftab720\ri-340\sl259\slmult1\sa160\partightenfactor0

\f0\fs26 \cf0 Debug Summary\
1. countDigits, 
\f1 \'c7\'f3
\f0 num%count, count
\f1 \'ce\'aa
\f0 num
\f1 \'b5\'c4\'ce\'bb\'ca\'fd
\f0 , 
\f1 \'bc\'d3\'d2\'bb\'b8\'f6
\f0 int input = num, input%m; \
2. sortArray, 
\f1 \'d1\'a1\'d4\'f1\'c5\'c5\'d0\'f2
\f0 , decending order
\f1 , \'bd\'b5\'d0\'f2
\f0 , 
\f1 \'c5\'d0\'b6\'cf\'cc\'f5\'bc\'fe\'c0\'ef\'b5\'c4
\f0 >
\f1 \'bb\'bb\'b3\'c9
\f0 <\
3. replaceValues, 
\f1 \'c8\'f4
\f0 array
\f1 \'b3\'a4\'b6\'c8\'ce\'aa\'c6\'e6\'ca\'fd\'c8\'ab\'bb\'bb\'ce\'aa
\f0 1
\f1 \'c5\'bc\'ca\'fd\'bb\'bb\'ce\'aa
\f0 0,  i<=len, j<=len
\f1 \'b8\'c4\'b3\'c9
\f0  i<len, j<len\
4. sortArray, 
\f1 \'c1\'ed\'d2\'bb\'d6\'d6\'c5\'c5\'d0\'f2\'a3\'ac
\f0 decending
\f1 \'bd\'b5\'d0\'f2\'a3\'ac
\f0 >
\f1 \'bb\'bb\'b3\'c9
\f0 <\
5. ReverseArray, len += 1 
\f1 \'b8\'c4\'ce\'aa
\f0  len -= 1\
6. removeElement, i++
\f1 \'b8\'c4\'ce\'aa
\f0 i+1\
7. printPattern, OddEvenNumber, 
\f1 \'ca\'e4\'b3\'f6\'c6\'e6\'c5\'bc\'ca\'fd
\f0 , for
\f1 \'cc\'ed\'bc\'d3\'b4\'f3\'c0\'a8\'ba\'c5
\f0 \
8. countOccurence, 
\f1 \'b7\'b5\'bb\'d8
\f0 value
\f1 \'d4\'da
\f0 array
\f1 \'d6\'d0\'b3\'f6\'cf\'d6\'b5\'c4\'b4\'ce\'ca\'fd
\f0 , while
\f1 \'c0\'ef\'c3\'e6\'d7\'ee\'ba\'f3\'bc\'d3\'c9\'cf
\f0  i++\
9. checkGrade
\f1 \'a3\'ac\'b3\'c9\'bc\'a8\'b4\'f2\'b7\'d6
\f0 ABCD
\f1 \'a3\'ac\'c5\'d0\'b6\'cf\'ca\'e4\'c8\'eb\'b5\'c4\'ca\'fd\'d4\'da\'ca\'b2\'c3\'b4\'b7\'b6\'ce\'a7\'a3\'ac
\f0  
\f1 \'c1\'bd\'b8\'f6
\f0 || 
\f1 \'b8\'c4\'b3\'c9
\f0  &&\
10. sumArray, 
\f1 \'cb\'d8\'d7\'e9\'c7\'f3\'ba\'cd\'a3\'ac
\f0 sum = arr[i] 
\f1 \'b8\'c4\'ce\'aa
\f0  sum += arr[i]\
11. pattern, 
\f1 \'ca\'e4\'b3\'f6
\f0  a ab abc abcd cout(ch++) 
\f1 \'b8\'c4\'ce\'aa
\f0  cout(print++)
\f1 \'a3\'ac\'ba\'c3\'cf\'f1\'bb\'b9\'d3\'d0\'b8\'f6\'b1\'e0\'d2\'eb\'b4\'ed\'ce\'f3
\f0 \
12. manchesterCode, 
\f1 \'ca\'e4\'b3\'f6\'c1\'bd\'b8\'f6\'d4\'aa\'cb\'d8\'cf\'e0\'cd\'ac\'ca\'e4\'b3\'f6
\f0 0
\f1 , \'b2\'bb\'cd\'ac\'ca\'e4\'b3\'f6
\f0 1,  
\f1 \'b8\'c4\'ce\'aaresult = (A!=A[i-1])
\f0 \
13. removeDuplicates, 
\f1 \'d3\'c3\'b5\'c4arr[k+1], 
\f0  
\f1 for\'c0\'ef k < length \'b8\'c4\'ce\'aa k < length - 1
\f0 \
14. array 
\f1 \'c6\'e6\'ca\'fd\'c5\'bc\'ca\'fd, for\'d1\'ad\'bb\'b7\'c0\'ef, i+=2 \'b8\'c4\'ce\'aai++
\f0 \
15.print 1111  
\f1 \'c0\'a8\'ba\'c5\'b4\'ed\'ce\'f3
\f0 \
16.selection sort, ascending order, arr[index_of_min] > arr[x] 
\f1 \'b8\'c4\'ce\'aa
\f0  > arr[y]\
17. arrayOperation < >
\f1 \'b7\'b4\'c1\'cb
\f0 \
\
1.
\f1 \'bf\'b4\'d7\'f3\'b2\'e0\'b5\'c4\'c3\'e8\'ca\'f6
\f0 \
2.run
\f1 \'cf\'c2\'b4\'fa\'c2\'eb\'a3\'ac\'bf\'b4\'b4\'ed\'ce\'f3\'cc\'e1\'ca\'be
\f0 \
3.
\f1 \'b4\'ed\'ce\'f3\'b7\'d6\'c0\'e0\'a3\'ac\'c8\'f4\'ca\'c7\'d2\'ec\'b3\'a3\'a3\'ac\'d7\'a2\'d2\'e2\'b1\'df\'bd\'e7\'a3\'ac\'c8\'f4\'ca\'c7\'d4\'cb\'d0\'d0\'bd\'e1\'b9\'fb\'b2\'bb\'d5\'fd\'c8\'b7\'a3\'ac\'d7\'a2\'d2\'e2\'d2\'aa\'bc\'c7\'cf\'c2
\f0 test_ID}